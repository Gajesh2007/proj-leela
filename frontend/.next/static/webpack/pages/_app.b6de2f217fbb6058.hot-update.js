"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LeelaAPI: function() { return /* binding */ LeelaAPI; }\n/* harmony export */ });\n// API URL Configuration\nconst API_URL = \"http://localhost:8000\" || 0;\n// API Client\nclass LeelaAPI {\n    async request(endpoint) {\n        let method = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"GET\", data = arguments.length > 2 ? arguments[2] : void 0;\n        const url = \"\".concat(this.baseUrl).concat(endpoint);\n        const headers = {\n            \"Content-Type\": \"application/json\"\n        };\n        const config = {\n            method,\n            headers,\n            body: data ? JSON.stringify(data) : undefined\n        };\n        try {\n            const response = await fetch(url, config);\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(\"API error (\".concat(response.status, \"): \").concat(errorText));\n            }\n            const result = await response.json();\n            return result;\n        } catch (error) {\n            console.error(\"API request failed:\", error);\n            throw error;\n        }\n    }\n    // Creative Idea Generation\n    async generateCreativeIdea(request) {\n        return this.request(\"/api/v1/ideas\", \"POST\", request);\n    }\n    // Dialectic Idea Generation\n    async generateDialecticIdea(request) {\n        return this.request(\"/api/v1/dialectic\", \"POST\", request);\n    }\n    // Meta-Engine Idea Generation\n    async generateMetaIdea(request) {\n        return this.request(\"/api/v1/meta/idea\", \"POST\", request);\n    }\n    // Get Available Domains\n    async getDomains() {\n        return this.request(\"/api/v1/domains\");\n    }\n    // Get Available Frameworks\n    async getFrameworks() {\n        return this.request(\"/api/v1/frameworks\");\n    }\n    // Get Available Prompts\n    async getPrompts() {\n        return this.request(\"/api/v1/prompts\");\n    }\n    // Get All Ideas\n    async getAllIdeas() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 50, offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        console.log(\"Frontend API: Requesting all ideas with limit=\".concat(limit, \", offset=\").concat(offset));\n        try {\n            const result = await this.request(\"/api/v1/ideas?limit=\".concat(limit, \"&offset=\").concat(offset));\n            console.log(\"Frontend API: Received \".concat(result.ideas.length, \" ideas from backend\"));\n            return result;\n        } catch (error) {\n            console.error(\"Frontend API: Error fetching ideas:\", error);\n            throw error;\n        }\n    }\n    // Get Specific Prompt\n    async getPrompt(promptName) {\n        return this.request(\"/api/v1/prompts/\".concat(promptName));\n    }\n    // Create or Update Prompt\n    async createOrUpdatePrompt(promptName, content) {\n        return this.request(\"/api/v1/prompts/\".concat(promptName), \"POST\", {\n            content\n        });\n    }\n    // Delete Prompt\n    async deletePrompt(promptName) {\n        return this.request(\"/api/v1/prompts/\".concat(promptName), \"DELETE\");\n    }\n    // Health Check\n    async healthCheck() {\n        return this.request(\"/health\");\n    }\n    constructor(baseUrl = API_URL){\n        this.baseUrl = baseUrl;\n    }\n}\n// Create and export default instance\nconst api = new LeelaAPI();\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/api.ts\n"));

/***/ })

});